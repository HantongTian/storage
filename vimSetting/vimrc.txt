runtime! debian.vim

" line enables syntax highlighting by default.
if has("syntax")
	syntax on
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

"*******************************************************************************
"使用vundle管理插件配置
filetype off
set nocompatible
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
"
"使用vundle管理vundle
Bundle 'gmarik/vundle'

"在下面添加插件
"PowerLine 插件 状态栏增强显示
Bundle 'Lokaltog/vim-powerline'
Bundle 'taglist.vim'
Bundle 'The-NERD-tree'
Bundle 'a.vim'
Bundle 'winmanager'
Bundle 'minibufexpl.vim'
Bundle 'c.vim'
"自动补全
Bundle 'Valloric/YouCompleteMe'
Bundle 'Valloric/ListToggle'
Bundle 'scrooloose/syntastic'

"set laststatus=2
"set t_Co=256
"let g:Powline_sysbols='fancy'
"
"默认打开Taglist
""let Tlist_Auto_Open=1
"设置
let Tlist_Ctags_Cmd='/usr/bin/ctags'
let Tlist_Show_One_File=1 "不同时显示多个文件的tag，只显示当前
let Tlist_Exit_OnlyWindow=1 "若taglist窗口是最后一个,关闭则退出vim


"设置左侧窗口显示样式为下面组合
let g:winManagerWindowLayout='FileExplorer|TagList'
map <C-w><C-m> :WMToggle<cr>

"配置minibufexpl，结合minibufexpl.vim
"C-Tab组合，向前循环切换buffer并打开
let g:miniBufExplMapCTabSwitchBufs=1
"使用<C-h,j,k,l>切换上下左右窗口
let g:miniBufExplMapWindowNavVim=1
"使用<C-箭头>切换
"let g:miniBufExplMapWindowNavArrows=1
"禁止在不可编辑的窗口（如TagList窗口）中打开选中的buffger
let g:miniBufExplModSelTarget=1

"映射F12在新buffer中打开c/h文件,配套a.vim
nnoremap <silent> <F12> :A<CR>

"Vundle配置必须开启插件功能
filetype plugin indent on
"Brief help of vundle
"	:bundleList
"	:BundleInstall
"	:BundleSerch
"	:BundleClean
"	:help vundle
"End brief help
"***************************************************************************

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"YouCompleteMe配置
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0	"打开vim，不询问是否加载py配置
let g:ycm_collect_identifiers_from_tag_files=1	"使用ctags生成的tags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
"set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)


"Myself
set nu	"line Number
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8

set autoread  	"file autoread when changed
set completeopt=preview,menu  "代码补全
set completeopt=longest,menu
set clipboard+=unnamed	"share clipboard
set nobackup	"Nerver backup

set confirm		"处理未保存或只读时弹出确认
set nocompatible  "Use VIM only
"set autoindent	"自动缩进
set cindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab

set ignorecase	"搜索忽略大小写
set statusline=%F%m%r%h%w\[FORMAT=%{&ff}]\[TYPE=%Y]\[POS=%l,%v][%p%%]\%{strftime(\"%d/%m/%y\-\%H:%M\")}		"状态行信息
set laststatus=2  "1 启动显示  2.总是显示


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"高亮显示当前行
autocmd InsertLeave * se nocul	"用浅色高亮当前行
autocmd InsertEnter * se cul	"用浅色高亮当前行
set cursorline
hi CursorLine cterm=NONE ctermbg=green ctermfg=NONE guibg=NONE guifg=NONE
hi CursorColumn cterm=NONE ctermbg=red ctermfg=NONE guibg=NONE guifg=NONE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"常用自动补全
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
	if getline('.')[col('.') - 1]==a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"ctags 设置
"按下F5重新生成tag文件，并更新taglist
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=tags
set tags+=./tags "添加当前工作目录下的tags文件
set tags+=/usr/src/linux-source/tags	"添加源码路径下的tags文件
"""""""""""""""""""""""""""""""""'""""""""""'"""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"QuickFix 设置
"按下F7，执行make编译，并打开quickfix窗口，显示编译信息
map <F7> :make<CR><CR><CR> :copen<CR><CR>
imap <F7> <ESC>:make<CR><CR><CR> :copen<CR><CR>
"按下F8，光标移到上一个错误所在行
map <F8> :cp<CR>
imap <ESC><F8> :cp<CR>
"按下F9，光标移到下一个错误所在行
map <F9> :cn<CR>
imap <ESC><F9> :cn<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""'""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'""""
"在当前目录生成cscope.out：cscope -Rbq
"Cscope 配置
if has("cscope")
	set csprg=/usr/bin/cscope	"用指定的cscope的命令
	"设置cstag命令查找次序：0先cscope再标签文件；1相反
	set csto=0
	"使用quickfix窗口显示cscope查找结果
	set cscopequickfix=s-,c-,d-,i-,t-,e-
	set nocsverb
	"若当前目录下有cscope数据库，则添加到vim
	if filereadable("cscope.out")
		cs add cscope.out
	elseif $CSCOPE_DB != ""	"否则，只要环境变量不为空，则添加制定的数据库到vim
		cs add $CSCOPE_DB
	endif	
	if filereadable("/usr/src/linux-source/cscope.out")
		cs add /usr/src/linux-source/cscope.out /usr/src/linux-source/
	endif
	set csverb
endif
map <F4> :cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
imap <F4> <ESC>:cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
"映射Cscope查找命令，如下：ctrl+shift+-，然后很快按下命令符c、g等
map <C-s> :cs find s <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
map <C-g> :cs find g <C-R>=expand("<cword>")<CR><CR>
map <C-d> :cs find d <C-R>=expand("<cword>")<CR><CR>
map <C-c> :cs find c <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
map <C-t> :cs find t <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
map <C-e> :cs find e <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
map <C-f> :cs find f <C-R>=expand("<cfile>")<CR><CR>
map <C-i> :cs find i <C-R>=expand("<cfile>")<CR><CR> :copen<CR><CR>
imap <C-s> <ESC>:cs find s <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
imap <C-g> <ESC>:cs find g <C-R>=expand("<cword>")<CR><CR>
imap <C-d> <ESC>:cs find d <C-R>=expand("<cword>")<CR><CR>
imap <C-c> <ESC>:cs find c <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
imap <C-t> <ESC>:cs find t <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
imap <C-e> <ESC>:cs find e <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
imap <C-f> <ESC>:cs find f <C-R>=expand("<cfile>")<CR><CR>
imap <C-i> <ESC>:cs find i <C-R>=expand("<cfile>")<CR><CR> :copen<CR><CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
